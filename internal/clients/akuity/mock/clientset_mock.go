// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/akuityio/provider-crossplane-akuity/internal/clients/akuity (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package mock_akuity_client -destination internal/clients/akuity/mock/clientset_mock.go github.com/akuityio/provider-crossplane-akuity/internal/clients/akuity Client
//

// Package mock_akuity_client is a generated GoMock package.
package mock_akuity_client

import (
	context "context"
	reflect "reflect"

	argocdv1 "github.com/akuity/api-client-go/pkg/api/gen/argocd/v1"
	v1alpha1 "github.com/akuityio/provider-crossplane-akuity/apis/core/v1alpha1"
	v1alpha10 "github.com/akuityio/provider-crossplane-akuity/internal/types/generated/akuity/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ApplyCluster mocks base method.
func (m *MockClient) ApplyCluster(ctx context.Context, instanceID string, cluster v1alpha10.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyCluster", ctx, instanceID, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyCluster indicates an expected call of ApplyCluster.
func (mr *MockClientMockRecorder) ApplyCluster(ctx, instanceID, cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCluster", reflect.TypeOf((*MockClient)(nil).ApplyCluster), ctx, instanceID, cluster)
}

// ApplyInstance mocks base method.
func (m *MockClient) ApplyInstance(ctx context.Context, request *argocdv1.ApplyInstanceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyInstance", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyInstance indicates an expected call of ApplyInstance.
func (mr *MockClientMockRecorder) ApplyInstance(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyInstance", reflect.TypeOf((*MockClient)(nil).ApplyInstance), ctx, request)
}

// BuildApplyInstanceRequest mocks base method.
func (m *MockClient) BuildApplyInstanceRequest(instance v1alpha1.Instance) (*argocdv1.ApplyInstanceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildApplyInstanceRequest", instance)
	ret0, _ := ret[0].(*argocdv1.ApplyInstanceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildApplyInstanceRequest indicates an expected call of BuildApplyInstanceRequest.
func (mr *MockClientMockRecorder) BuildApplyInstanceRequest(instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildApplyInstanceRequest", reflect.TypeOf((*MockClient)(nil).BuildApplyInstanceRequest), instance)
}

// DeleteCluster mocks base method.
func (m *MockClient) DeleteCluster(ctx context.Context, instanceID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, instanceID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClientMockRecorder) DeleteCluster(ctx, instanceID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClient)(nil).DeleteCluster), ctx, instanceID, name)
}

// DeleteInstance mocks base method.
func (m *MockClient) DeleteInstance(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockClientMockRecorder) DeleteInstance(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockClient)(nil).DeleteInstance), ctx, name)
}

// ExportInstance mocks base method.
func (m *MockClient) ExportInstance(ctx context.Context, name string) (*argocdv1.ExportInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportInstance", ctx, name)
	ret0, _ := ret[0].(*argocdv1.ExportInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportInstance indicates an expected call of ExportInstance.
func (mr *MockClientMockRecorder) ExportInstance(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportInstance", reflect.TypeOf((*MockClient)(nil).ExportInstance), ctx, name)
}

// GetCluster mocks base method.
func (m *MockClient) GetCluster(ctx context.Context, instanceID, name string) (*argocdv1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, instanceID, name)
	ret0, _ := ret[0].(*argocdv1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClientMockRecorder) GetCluster(ctx, instanceID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClient)(nil).GetCluster), ctx, instanceID, name)
}

// GetClusterManifests mocks base method.
func (m *MockClient) GetClusterManifests(ctx context.Context, instanceID, clusterName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterManifests", ctx, instanceID, clusterName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterManifests indicates an expected call of GetClusterManifests.
func (mr *MockClientMockRecorder) GetClusterManifests(ctx, instanceID, clusterName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterManifests", reflect.TypeOf((*MockClient)(nil).GetClusterManifests), ctx, instanceID, clusterName)
}

// GetInstance mocks base method.
func (m *MockClient) GetInstance(ctx context.Context, name string) (*argocdv1.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", ctx, name)
	ret0, _ := ret[0].(*argocdv1.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockClientMockRecorder) GetInstance(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockClient)(nil).GetInstance), ctx, name)
}
