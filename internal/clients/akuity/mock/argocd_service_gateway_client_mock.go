// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/akuity/api-client-go/pkg/api/gen/argocd/v1 (interfaces: ArgoCDServiceGatewayClient)
//
// Generated by this command:
//
//	mockgen -package mock_akuity_client -destination internal/clients/akuity/mock/argocd_service_gateway_client_mock.go github.com/akuity/api-client-go/pkg/api/gen/argocd/v1 ArgoCDServiceGatewayClient
//

// Package mock_akuity_client is a generated GoMock package.
package mock_akuity_client

import (
	context "context"
	reflect "reflect"

	argocdv1 "github.com/akuity/api-client-go/pkg/api/gen/argocd/v1"
	gomock "go.uber.org/mock/gomock"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockArgoCDServiceGatewayClient is a mock of ArgoCDServiceGatewayClient interface.
type MockArgoCDServiceGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockArgoCDServiceGatewayClientMockRecorder
}

// MockArgoCDServiceGatewayClientMockRecorder is the mock recorder for MockArgoCDServiceGatewayClient.
type MockArgoCDServiceGatewayClientMockRecorder struct {
	mock *MockArgoCDServiceGatewayClient
}

// NewMockArgoCDServiceGatewayClient creates a new mock instance.
func NewMockArgoCDServiceGatewayClient(ctrl *gomock.Controller) *MockArgoCDServiceGatewayClient {
	mock := &MockArgoCDServiceGatewayClient{ctrl: ctrl}
	mock.recorder = &MockArgoCDServiceGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArgoCDServiceGatewayClient) EXPECT() *MockArgoCDServiceGatewayClientMockRecorder {
	return m.recorder
}

// ApplyInstance mocks base method.
func (m *MockArgoCDServiceGatewayClient) ApplyInstance(arg0 context.Context, arg1 *argocdv1.ApplyInstanceRequest) (*argocdv1.ApplyInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyInstance", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.ApplyInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyInstance indicates an expected call of ApplyInstance.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) ApplyInstance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyInstance", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).ApplyInstance), arg0, arg1)
}

// CreateInstance mocks base method.
func (m *MockArgoCDServiceGatewayClient) CreateInstance(arg0 context.Context, arg1 *argocdv1.CreateInstanceRequest) (*argocdv1.CreateInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.CreateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) CreateInstance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).CreateInstance), arg0, arg1)
}

// CreateInstanceCluster mocks base method.
func (m *MockArgoCDServiceGatewayClient) CreateInstanceCluster(arg0 context.Context, arg1 *argocdv1.CreateInstanceClusterRequest) (*argocdv1.CreateInstanceClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceCluster", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.CreateInstanceClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceCluster indicates an expected call of CreateInstanceCluster.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) CreateInstanceCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceCluster", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).CreateInstanceCluster), arg0, arg1)
}

// DeleteInstance mocks base method.
func (m *MockArgoCDServiceGatewayClient) DeleteInstance(arg0 context.Context, arg1 *argocdv1.DeleteInstanceRequest) (*argocdv1.DeleteInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.DeleteInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) DeleteInstance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).DeleteInstance), arg0, arg1)
}

// DeleteInstanceAccount mocks base method.
func (m *MockArgoCDServiceGatewayClient) DeleteInstanceAccount(arg0 context.Context, arg1 *argocdv1.DeleteInstanceAccountRequest) (*argocdv1.DeleteInstanceAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceAccount", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.DeleteInstanceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceAccount indicates an expected call of DeleteInstanceAccount.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) DeleteInstanceAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceAccount", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).DeleteInstanceAccount), arg0, arg1)
}

// DeleteInstanceCluster mocks base method.
func (m *MockArgoCDServiceGatewayClient) DeleteInstanceCluster(arg0 context.Context, arg1 *argocdv1.DeleteInstanceClusterRequest) (*argocdv1.DeleteInstanceClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceCluster", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.DeleteInstanceClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceCluster indicates an expected call of DeleteInstanceCluster.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) DeleteInstanceCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceCluster", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).DeleteInstanceCluster), arg0, arg1)
}

// ExportInstance mocks base method.
func (m *MockArgoCDServiceGatewayClient) ExportInstance(arg0 context.Context, arg1 *argocdv1.ExportInstanceRequest) (*argocdv1.ExportInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportInstance", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.ExportInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportInstance indicates an expected call of ExportInstance.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) ExportInstance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportInstance", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).ExportInstance), arg0, arg1)
}

// GetAIAssistantUsageStats mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetAIAssistantUsageStats(arg0 context.Context, arg1 *argocdv1.GetAIAssistantUsageStatsRequest) (*argocdv1.GetAIAssistantUsageStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAIAssistantUsageStats", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetAIAssistantUsageStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAIAssistantUsageStats indicates an expected call of GetAIAssistantUsageStats.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetAIAssistantUsageStats(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAIAssistantUsageStats", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetAIAssistantUsageStats), arg0, arg1)
}

// GetInstance mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstance(arg0 context.Context, arg1 *argocdv1.GetInstanceRequest) (*argocdv1.GetInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstance), arg0, arg1)
}

// GetInstanceAppsetSecret mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceAppsetSecret(arg0 context.Context, arg1 *argocdv1.GetInstanceAppsetSecretRequest) (*argocdv1.GetInstanceAppsetSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceAppsetSecret", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceAppsetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceAppsetSecret indicates an expected call of GetInstanceAppsetSecret.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceAppsetSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceAppsetSecret", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceAppsetSecret), arg0, arg1)
}

// GetInstanceCSS mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceCSS(arg0 context.Context, arg1 *argocdv1.GetInstanceCSSRequest) (*argocdv1.GetInstanceCSSResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceCSS", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceCSSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceCSS indicates an expected call of GetInstanceCSS.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceCSS(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceCSS", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceCSS), arg0, arg1)
}

// GetInstanceCluster mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceCluster(arg0 context.Context, arg1 *argocdv1.GetInstanceClusterRequest) (*argocdv1.GetInstanceClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceCluster", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceCluster indicates an expected call of GetInstanceCluster.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceCluster", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceCluster), arg0, arg1)
}

// GetInstanceClusterCommand mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceClusterCommand(arg0 context.Context, arg1 *argocdv1.GetInstanceClusterCommandRequest) (*argocdv1.GetInstanceClusterCommandResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceClusterCommand", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceClusterCommandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceClusterCommand indicates an expected call of GetInstanceClusterCommand.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceClusterCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceClusterCommand", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceClusterCommand), arg0, arg1)
}

// GetInstanceClusterInfo mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceClusterInfo(arg0 context.Context, arg1 *argocdv1.GetInstanceClusterRequest) (*argocdv1.GetInstanceClusterInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceClusterInfo", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceClusterInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceClusterInfo indicates an expected call of GetInstanceClusterInfo.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceClusterInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceClusterInfo", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceClusterInfo), arg0, arg1)
}

// GetInstanceClusterManifests mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceClusterManifests(arg0 context.Context, arg1 *argocdv1.GetInstanceClusterManifestsRequest) (<-chan *httpbody.HttpBody, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceClusterManifests", arg0, arg1)
	ret0, _ := ret[0].(<-chan *httpbody.HttpBody)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceClusterManifests indicates an expected call of GetInstanceClusterManifests.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceClusterManifests(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceClusterManifests", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceClusterManifests), arg0, arg1)
}

// GetInstanceConfigManagementPlugins mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceConfigManagementPlugins(arg0 context.Context, arg1 *argocdv1.GetInstanceConfigManagementPluginsRequest) (*argocdv1.GetInstanceConfigManagementPluginsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceConfigManagementPlugins", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceConfigManagementPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceConfigManagementPlugins indicates an expected call of GetInstanceConfigManagementPlugins.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceConfigManagementPlugins(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceConfigManagementPlugins", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceConfigManagementPlugins), arg0, arg1)
}

// GetInstanceImageUpdaterSettings mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceImageUpdaterSettings(arg0 context.Context, arg1 *argocdv1.GetInstanceImageUpdaterSettingsRequest) (*argocdv1.GetInstanceImageUpdaterSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceImageUpdaterSettings", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceImageUpdaterSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceImageUpdaterSettings indicates an expected call of GetInstanceImageUpdaterSettings.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceImageUpdaterSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceImageUpdaterSettings", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceImageUpdaterSettings), arg0, arg1)
}

// GetInstanceNotificationCatalog mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceNotificationCatalog(arg0 context.Context, arg1 *argocdv1.GetInstanceNotificationCatalogRequest) (*argocdv1.GetInstanceNotificationCatalogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNotificationCatalog", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceNotificationCatalogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNotificationCatalog indicates an expected call of GetInstanceNotificationCatalog.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceNotificationCatalog(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNotificationCatalog", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceNotificationCatalog), arg0, arg1)
}

// GetInstanceNotificationSettings mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceNotificationSettings(arg0 context.Context, arg1 *argocdv1.GetInstanceNotificationSettingsRequest) (*argocdv1.GetInstanceNotificationSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNotificationSettings", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceNotificationSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNotificationSettings indicates an expected call of GetInstanceNotificationSettings.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceNotificationSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNotificationSettings", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceNotificationSettings), arg0, arg1)
}

// GetInstanceResourceCustomizations mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetInstanceResourceCustomizations(arg0 context.Context, arg1 *argocdv1.GetInstanceResourceCustomizationsRequest) (*argocdv1.GetInstanceResourceCustomizationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceResourceCustomizations", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetInstanceResourceCustomizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceResourceCustomizations indicates an expected call of GetInstanceResourceCustomizations.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetInstanceResourceCustomizations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceResourceCustomizations", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetInstanceResourceCustomizations), arg0, arg1)
}

// GetSyncOperationsEvents mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetSyncOperationsEvents(arg0 context.Context, arg1 *argocdv1.GetSyncOperationsEventsRequest) (*argocdv1.GetSyncOperationsEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncOperationsEvents", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetSyncOperationsEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncOperationsEvents indicates an expected call of GetSyncOperationsEvents.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetSyncOperationsEvents(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncOperationsEvents", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetSyncOperationsEvents), arg0, arg1)
}

// GetSyncOperationsStats mocks base method.
func (m *MockArgoCDServiceGatewayClient) GetSyncOperationsStats(arg0 context.Context, arg1 *argocdv1.GetSyncOperationsStatsRequest) (*argocdv1.GetSyncOperationsStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncOperationsStats", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.GetSyncOperationsStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncOperationsStats indicates an expected call of GetSyncOperationsStats.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) GetSyncOperationsStats(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncOperationsStats", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).GetSyncOperationsStats), arg0, arg1)
}

// ListInstanceAccounts mocks base method.
func (m *MockArgoCDServiceGatewayClient) ListInstanceAccounts(arg0 context.Context, arg1 *argocdv1.ListInstanceAccountsRequest) (*argocdv1.ListInstanceAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceAccounts", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.ListInstanceAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceAccounts indicates an expected call of ListInstanceAccounts.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) ListInstanceAccounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceAccounts", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).ListInstanceAccounts), arg0, arg1)
}

// ListInstanceClusters mocks base method.
func (m *MockArgoCDServiceGatewayClient) ListInstanceClusters(arg0 context.Context, arg1 *argocdv1.ListInstanceClustersRequest) (*argocdv1.ListInstanceClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceClusters", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.ListInstanceClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceClusters indicates an expected call of ListInstanceClusters.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) ListInstanceClusters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceClusters", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).ListInstanceClusters), arg0, arg1)
}

// ListInstanceVersions mocks base method.
func (m *MockArgoCDServiceGatewayClient) ListInstanceVersions(arg0 context.Context, arg1 *argocdv1.ListInstanceVersionsRequest) (*argocdv1.ListInstanceVersionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceVersions", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.ListInstanceVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceVersions indicates an expected call of ListInstanceVersions.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) ListInstanceVersions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceVersions", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).ListInstanceVersions), arg0, arg1)
}

// ListInstances mocks base method.
func (m *MockArgoCDServiceGatewayClient) ListInstances(arg0 context.Context, arg1 *argocdv1.ListInstancesRequest) (*argocdv1.ListInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.ListInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) ListInstances(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).ListInstances), arg0, arg1)
}

// PatchInstance mocks base method.
func (m *MockArgoCDServiceGatewayClient) PatchInstance(arg0 context.Context, arg1 *argocdv1.PatchInstanceRequest) (*argocdv1.PatchInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInstance", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.PatchInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchInstance indicates an expected call of PatchInstance.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) PatchInstance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInstance", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).PatchInstance), arg0, arg1)
}

// PatchInstanceAppsetSecret mocks base method.
func (m *MockArgoCDServiceGatewayClient) PatchInstanceAppsetSecret(arg0 context.Context, arg1 *argocdv1.PatchInstanceAppsetSecretRequest) (*argocdv1.PatchInstanceAppsetSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInstanceAppsetSecret", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.PatchInstanceAppsetSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchInstanceAppsetSecret indicates an expected call of PatchInstanceAppsetSecret.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) PatchInstanceAppsetSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInstanceAppsetSecret", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).PatchInstanceAppsetSecret), arg0, arg1)
}

// PatchInstanceImageUpdaterSecret mocks base method.
func (m *MockArgoCDServiceGatewayClient) PatchInstanceImageUpdaterSecret(arg0 context.Context, arg1 *argocdv1.PatchInstanceImageUpdaterSecretRequest) (*argocdv1.PatchInstanceImageUpdaterSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInstanceImageUpdaterSecret", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.PatchInstanceImageUpdaterSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchInstanceImageUpdaterSecret indicates an expected call of PatchInstanceImageUpdaterSecret.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) PatchInstanceImageUpdaterSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInstanceImageUpdaterSecret", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).PatchInstanceImageUpdaterSecret), arg0, arg1)
}

// PatchInstanceNotificationSecret mocks base method.
func (m *MockArgoCDServiceGatewayClient) PatchInstanceNotificationSecret(arg0 context.Context, arg1 *argocdv1.PatchInstanceNotificationSecretRequest) (*argocdv1.PatchInstanceNotificationSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInstanceNotificationSecret", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.PatchInstanceNotificationSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchInstanceNotificationSecret indicates an expected call of PatchInstanceNotificationSecret.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) PatchInstanceNotificationSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInstanceNotificationSecret", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).PatchInstanceNotificationSecret), arg0, arg1)
}

// PatchInstanceSecret mocks base method.
func (m *MockArgoCDServiceGatewayClient) PatchInstanceSecret(arg0 context.Context, arg1 *argocdv1.PatchInstanceSecretRequest) (*argocdv1.PatchInstanceSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInstanceSecret", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.PatchInstanceSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchInstanceSecret indicates an expected call of PatchInstanceSecret.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) PatchInstanceSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInstanceSecret", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).PatchInstanceSecret), arg0, arg1)
}

// RegenerateInstanceAccountPassword mocks base method.
func (m *MockArgoCDServiceGatewayClient) RegenerateInstanceAccountPassword(arg0 context.Context, arg1 *argocdv1.RegenerateInstanceAccountPasswordRequest) (*argocdv1.RegenerateInstanceAccountPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateInstanceAccountPassword", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.RegenerateInstanceAccountPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateInstanceAccountPassword indicates an expected call of RegenerateInstanceAccountPassword.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) RegenerateInstanceAccountPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateInstanceAccountPassword", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).RegenerateInstanceAccountPassword), arg0, arg1)
}

// RotateInstanceClusterCredentials mocks base method.
func (m *MockArgoCDServiceGatewayClient) RotateInstanceClusterCredentials(arg0 context.Context, arg1 *argocdv1.RotateInstanceClusterCredentialsRequest) (*argocdv1.RotateInstanceClusterCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateInstanceClusterCredentials", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.RotateInstanceClusterCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateInstanceClusterCredentials indicates an expected call of RotateInstanceClusterCredentials.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) RotateInstanceClusterCredentials(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateInstanceClusterCredentials", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).RotateInstanceClusterCredentials), arg0, arg1)
}

// UpdateInstance mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstance(arg0 context.Context, arg1 *argocdv1.UpdateInstanceRequest) (*argocdv1.UpdateInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpdateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstance), arg0, arg1)
}

// UpdateInstanceAccountPassword mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstanceAccountPassword(arg0 context.Context, arg1 *argocdv1.UpdateInstanceAccountPasswordRequest) (*argocdv1.UpdateInstanceAccountPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceAccountPassword", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpdateInstanceAccountPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceAccountPassword indicates an expected call of UpdateInstanceAccountPassword.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstanceAccountPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceAccountPassword", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstanceAccountPassword), arg0, arg1)
}

// UpdateInstanceCSS mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstanceCSS(arg0 context.Context, arg1 *argocdv1.UpdateInstanceCSSRequest) (*argocdv1.UpdateInstanceCSSResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceCSS", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpdateInstanceCSSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceCSS indicates an expected call of UpdateInstanceCSS.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstanceCSS(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceCSS", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstanceCSS), arg0, arg1)
}

// UpdateInstanceCluster mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstanceCluster(arg0 context.Context, arg1 *argocdv1.UpdateInstanceClusterRequest) (*argocdv1.UpdateInstanceClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceCluster", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpdateInstanceClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceCluster indicates an expected call of UpdateInstanceCluster.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstanceCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceCluster", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstanceCluster), arg0, arg1)
}

// UpdateInstanceClusters mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstanceClusters(arg0 context.Context, arg1 *argocdv1.UpdateInstanceClustersRequest) (*argocdv1.UpdateInstanceClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceClusters", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpdateInstanceClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceClusters indicates an expected call of UpdateInstanceClusters.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstanceClusters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceClusters", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstanceClusters), arg0, arg1)
}

// UpdateInstanceClustersAgentVersion mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstanceClustersAgentVersion(arg0 context.Context, arg1 *argocdv1.UpdateInstanceClustersAgentVersionRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceClustersAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceClustersAgentVersion indicates an expected call of UpdateInstanceClustersAgentVersion.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstanceClustersAgentVersion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceClustersAgentVersion", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstanceClustersAgentVersion), arg0, arg1)
}

// UpdateInstanceConfigManagementPlugins mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstanceConfigManagementPlugins(arg0 context.Context, arg1 *argocdv1.UpdateInstanceConfigManagementPluginsRequest) (*argocdv1.UpdateInstanceConfigManagementPluginsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceConfigManagementPlugins", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpdateInstanceConfigManagementPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceConfigManagementPlugins indicates an expected call of UpdateInstanceConfigManagementPlugins.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstanceConfigManagementPlugins(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceConfigManagementPlugins", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstanceConfigManagementPlugins), arg0, arg1)
}

// UpdateInstanceImageUpdaterConfig mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstanceImageUpdaterConfig(arg0 context.Context, arg1 *argocdv1.UpdateInstanceImageUpdaterConfigRequest) (*argocdv1.UpdateInstanceImageUpdaterConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceImageUpdaterConfig", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpdateInstanceImageUpdaterConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceImageUpdaterConfig indicates an expected call of UpdateInstanceImageUpdaterConfig.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstanceImageUpdaterConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceImageUpdaterConfig", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstanceImageUpdaterConfig), arg0, arg1)
}

// UpdateInstanceImageUpdaterSSHConfig mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstanceImageUpdaterSSHConfig(arg0 context.Context, arg1 *argocdv1.UpdateInstanceImageUpdaterSSHConfigRequest) (*argocdv1.UpdateInstanceImageUpdaterSSHConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceImageUpdaterSSHConfig", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpdateInstanceImageUpdaterSSHConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceImageUpdaterSSHConfig indicates an expected call of UpdateInstanceImageUpdaterSSHConfig.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstanceImageUpdaterSSHConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceImageUpdaterSSHConfig", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstanceImageUpdaterSSHConfig), arg0, arg1)
}

// UpdateInstanceNotificationConfig mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstanceNotificationConfig(arg0 context.Context, arg1 *argocdv1.UpdateInstanceNotificationConfigRequest) (*argocdv1.UpdateInstanceNotificationConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceNotificationConfig", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpdateInstanceNotificationConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceNotificationConfig indicates an expected call of UpdateInstanceNotificationConfig.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstanceNotificationConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceNotificationConfig", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstanceNotificationConfig), arg0, arg1)
}

// UpdateInstanceResourceCustomizations mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpdateInstanceResourceCustomizations(arg0 context.Context, arg1 *argocdv1.UpdateInstanceResourceCustomizationsRequest) (*argocdv1.UpdateInstanceResourceCustomizationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceResourceCustomizations", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpdateInstanceResourceCustomizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceResourceCustomizations indicates an expected call of UpdateInstanceResourceCustomizations.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpdateInstanceResourceCustomizations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceResourceCustomizations", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpdateInstanceResourceCustomizations), arg0, arg1)
}

// UpsertInstanceAccount mocks base method.
func (m *MockArgoCDServiceGatewayClient) UpsertInstanceAccount(arg0 context.Context, arg1 *argocdv1.UpsertInstanceAccountRequest) (*argocdv1.UpsertInstanceAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertInstanceAccount", arg0, arg1)
	ret0, _ := ret[0].(*argocdv1.UpsertInstanceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertInstanceAccount indicates an expected call of UpsertInstanceAccount.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) UpsertInstanceAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInstanceAccount", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).UpsertInstanceAccount), arg0, arg1)
}

// WatchInstanceClusters mocks base method.
func (m *MockArgoCDServiceGatewayClient) WatchInstanceClusters(arg0 context.Context, arg1 *argocdv1.WatchInstanceClustersRequest) (<-chan *argocdv1.WatchInstanceClustersResponse, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchInstanceClusters", arg0, arg1)
	ret0, _ := ret[0].(<-chan *argocdv1.WatchInstanceClustersResponse)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WatchInstanceClusters indicates an expected call of WatchInstanceClusters.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) WatchInstanceClusters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchInstanceClusters", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).WatchInstanceClusters), arg0, arg1)
}

// WatchInstances mocks base method.
func (m *MockArgoCDServiceGatewayClient) WatchInstances(arg0 context.Context, arg1 *argocdv1.WatchInstancesRequest) (<-chan *argocdv1.WatchInstancesResponse, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchInstances", arg0, arg1)
	ret0, _ := ret[0].(<-chan *argocdv1.WatchInstancesResponse)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WatchInstances indicates an expected call of WatchInstances.
func (mr *MockArgoCDServiceGatewayClientMockRecorder) WatchInstances(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchInstances", reflect.TypeOf((*MockArgoCDServiceGatewayClient)(nil).WatchInstances), arg0, arg1)
}
